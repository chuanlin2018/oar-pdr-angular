{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { StepModel } from '../models/step.model';\nimport * as i0 from \"@angular/core\";\nconst STEPS = [new StepModel(1, \"step1\"), new StepModel(2, \"step2\"), new StepModel(3, \"step3\")];\nexport let StepService = /*#__PURE__*/(() => {\n  class StepService {\n    constructor() {\n      this.steps$ = new BehaviorSubject(STEPS);\n      this.currentStep$ = new BehaviorSubject(STEPS[1]);\n      this.currentStep$.next(this.steps$.value[0]);\n    }\n\n    setCurrentStep(step) {\n      this.currentStep$.next(step);\n    }\n\n    getCurrentStep() {\n      return this.currentStep$.asObservable();\n    }\n\n    getSteps() {\n      return this.steps$.asObservable();\n    }\n\n    setSteps(steps) {\n      this.steps$.next(steps);\n    }\n\n    moveToPrevStep() {\n      let index = this.currentStep$.value.stepIndex - 2;\n\n      while (!this.steps$.value[index].active && index > 0) {\n        index--;\n      }\n\n      if (index >= 0) {\n        this.currentStep$.next(this.steps$.value[index]);\n      }\n    }\n\n    moveToNextStep() {\n      let index = this.currentStep$.value.stepIndex;\n\n      while (!this.steps$.value[index].active && index < this.steps$.value.length) {\n        index++;\n      }\n\n      if (index < this.steps$.value.length) {\n        this.currentStep$.next(this.steps$.value[index]);\n      }\n    }\n\n    isLastStep() {\n      return this.currentStep$.value.stepIndex === this.steps$.value.length;\n    }\n\n    isFirstStep() {\n      return this.currentStep$.value.stepIndex === 1;\n    }\n    /**\n     * Determine if all steps are completed\n     * @returns completion status\n     */\n\n\n    allDone() {\n      let allDone = true;\n\n      for (let i = 0; i < this.steps$.value.length; i++) {\n        if (this.steps$.value[i] == undefined) {\n          allDone = false;\n          break;\n        } else if (this.steps$.value[i].active) {\n          allDone = allDone && this.steps$.value[i].isComplete;\n          if (!allDone) break;\n        }\n      }\n\n      return allDone;\n    }\n\n  }\n\n  StepService.ɵfac = function StepService_Factory(t) {\n    return new (t || StepService)();\n  };\n\n  StepService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: StepService,\n    factory: StepService.ɵfac,\n    providedIn: 'root'\n  });\n  return StepService;\n})();","map":null,"metadata":{},"sourceType":"module"}